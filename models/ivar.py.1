#aprire lista sampe dei vcf appena caricati in nuova form
#se ordino per campo, poi ricerco in gestione sample, esce errore incomprensibile

#Set value in sample, verificare che modifichi sono i campi vuoti e flegghi solo quelli che ha davvero modificato (quelli che era vuoti)
#errore export attributi variante
#visualizzare solo gli attributi validi; lo storico è una lista dentro all'edit degli attributi validi

#controllare data_upload quando faccio elavborazione: non deve toccarla, invece ora ha ora a 0

#Aggiungere riferimento file annotazioni sul record di annotazione caricato
# un file annotazioni non è cancellabile se presente in VARIANT_ATTONATION
# controllare anche cancellazione VCF_File: non eliminabile se sample presente con quel file
# -*- coding: utf-8 -*-
import json
from datetime import datetime
from gluon.contrib.appconfig import AppConfig
## once in production, remove reload=True to gain full speed
myconf = AppConfig(reload=False)

#Fede 22/5/2018 Aggiunto default_view
# view di default del progetto
default_view = 'ivar.html'
default_subview = 'ivar_sub.html'

#Per logging activity
#import logging
#logger = logging.getLogger(request.application) #"web2py.app.EB")
#logger.setLevel(logging.DEBUG)

def bootstrap_autocomplete(*args, **kwargs):
    widget = SQLFORM.widgets.autocomplete(*args, **kwargs)
    return lambda f, v: widget(f, v, _class='form-control', _type='text')


def representlabel(field,value):
    l=''
    for key,label in field.requires.options():
        if key==value:
            l=label
    return l

def requires_option(field):
    d= dict()
    s = field.requires.options()
    for key,label in field.requires.options():
        d[key]=label
    #return json.dumps(d)
    return XML(json.dumps(d))

"""
def options_widget(field,value,**kwargs):
    # Use web2py's intelligence to set up the right HTML for the select field
    # the widgets knows about the database model
    w = SQLFORM.widgets.options.widget
    xml = w(field,value,**kwargs)
    return xml
"""
# per editing inline (vcf)
def options_widget(field,value,**kwargs):
    return SQLFORM.widgets.options.widget(field,value,**kwargs)
def string_widget(field,value,**kwargs):
    return SQLFORM.widgets.string.widget(field,value,**kwargs)
def text_widget(field,value,**kwargs):
    return SQLFORM.widgets.text.widget(field,value,**kwargs)
def boolean_widget(field,value,**kwargs):
    return SQLFORM.widgets.boolean.widget(field,value,**kwargs)


def string_to_list(string):
    #trasforma una stringa di forma "X"|"Y"|"Z"
    #in una lista (X,Y,Z)
    if not string:
        return list()
    if '"|"' in string:
        lista = string.split('"|"') #trasformo in lista
    else:
        lista = string
    if not isinstance(lista,list):
        lista = [lista]
    lis = list()
    for x in lista:
        if x[0]=='"':  #tolgo primo e ultimo carattere se sono "
            x = x[1:]
        if x[-1]=='"':
            x = x[:-1]
        lis.append(x)

    return lis

def list_to_dict(lista):
    #trasforma una lista  "X":"L","X":"L","X":"L"
    #in un dizionario {X:L,X:L}

    if not isinstance(lista,list):
        lista = [lista]

    diz = dict()
    for a in lista:
        if ":" in a:
            xl = a.split(":")
            x = xl[0] #field
            if x[0]=='"':  #il primo e l'ultimo carattere solo ""
                x = x[1:]
            if x[-1]=='"':
                x = x[:-1]
            l = xl[1]  # lable
            if l[0]=='"':  #il primo e l'ultimo carattere solo ""
                l = l[1:]
            if l[-1]=='"':
                l = l[:-1]
        else:
            x = a
            l = a

        diz[x] = l

    return diz

#########################################

def head_title(titolo='',btn_prec=None):

    form_head  = FORM(
                        DIV(
                            DIV(
                                DIV(
                                    SPAN (
                                           A(' ' , _title=T('Back'), _class='btn btn-default btn-sm glyphicon glyphicon-arrow-left'
                                                  , _href=btn_prec)
                                          ,XML('&nbsp;&nbsp;')
                                         ) if (btn_prec) else ''
                                   ,SPAN(titolo,_class="h3",_style="vertical-align:bottom")
                                   ,_class="panel-title"
                                )
                                ,_class="panel-heading"
                            )
                            ,_class="panel panel-success", _style="margin-bottom:5px"
                        )  
                   )
    return form_head


#####################
####   TABELLE   ####
#####################

#############
## VARIANT ##
#############

db.define_table('VARIANT'
                ,Field('gene'               ,'string' ,length = 20   ,default='' ,label = T('Gene'))
                ,Field('id_hg19'            ,'string' ,length = 200  ,default='' ,label = T('hg19'))
                ,Field('id_hg38'            ,'string' ,length = 200  ,default='' ,label = T('hg38'))
                ,Field('classif'            ,'string' ,length = 2    ,default='' ,label = T('Classif.'))
                ,Field('note'               ,'text'                  ,default='' ,label = T('note'))
                ,format='%(gene)s %(id_hg19)s'
               )

#db.VARIANT.id_hg19.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
#db.VARIANT.gene.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))

db.VARIANT.classif.requires=IS_EMPTY_OR(IS_IN_SET([('C1' ,T('C1'))
                                      ,('C2' ,T('C2'))
                                      ,('C3' ,T('C3'))
                                      ,('C4' ,T('C4'))
                                      ,('C5' ,T('C5'))
                                      ]))
db.VARIANT.classif.represent = lambda value, row: representlabel(db.VARIANT.classif,value)


db.VARIANT.note.widget = lambda f,v : SQLFORM.widgets.text.widget(f,v,_rows=2)

def validation_VARIANT(form):
    return True

def find_insert_VARIANT(hg,variant,gene,classif):
    row = None
    variant_id = None
    if variant[0:3] != "chr":
        variant = "chr" + variant
    #se variant non inizia per chr, aggiungerlo
    if hg=='hg19':
        row = db(db.VARIANT.id_hg19 == variant).select().first()
    if hg=='hg38':
        row = db(db.VARIANT.id_hg38 == variant).select().first()
    if row:
        variant_id = row['id']
        id_hg19 = row['id_hg19']
        id_hg38 = row['id_hg38']
        update_VARIANT(variant_id,id_hg19,id_hg38,gene,classif)
    else:
        if hg=='hg19':
            variant_id = db.VARIANT.insert(id_hg19=variant, gene=gene, classif=classif)
        if hg=='hg38':
            variant_id = db.VARIANT.insert(id_hg38=variant, gene=gene, classif=classif)

    return variant_id

def update_VARIANT(variant_id,id_hg19,id_hg38,gene,classif):
    row = db(db.VARIANT.id == variant_id).select().first()
    if row:
        row.id_hg19 = id_hg19
        row.id_hg38 = id_hg38
        row.gene = gene
        classif = classif.strip()
        if classif and classif != "": # se passo classif
            if row.classif: # se classif già inserita e diversa da quella in inserimento, storicizzo l'attuale come attributo CLASSIF
                if row.classif != "" and row.classif != "C":
                    if row.classif != classif:
                        attribute = dict()
                        attribute[myconf.take('iVarDB.classif_history_name')]=row.classif
                        insert_VARIANT_ATTRIBUTE(variant_id, attribute,None)

        row.classif = classif
        row.update_record()
        db.commit()

def variant_id_hg19(id_hg19):
    row = db(db.VARIANT.id_hg19 == id_hg19).select().first() or 0
    return row.id

def variant_num_sample(variant_id):
    numrecord = db(db.SAMPLE_VARIANT.VARIANT_id == variant_id).count() or 0
    return numrecord


db.define_table('VARIANT_ATTRIBUTE'
                ,Field('VARIANT_id'        ,'reference VARIANT'      ,label = T('Variant'))
                ,Field('attribute_name'    ,'string' ,length = 250   ,label = T('Attribute'))
                ,Field('attribute_value'   ,'string' ,length = 500   ,label = T('Value'))
                ,Field('valid_from'        ,'date'                   ,label = T('Valid from'))
                ,format='%(attribute_name)s : %(attribute_value)s  at %(valid_from)'
               )

db.VARIANT_ATTRIBUTE.attribute_name.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.VARIANT_ATTRIBUTE.attribute_value.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.VARIANT_ATTRIBUTE.attribute_value.widget = lambda f,v : SQLFORM.widgets.text.widget(f,v,_rows=4,_title=v)

db.VARIANT_ATTRIBUTE.valid_from.requires = IS_DATE()
db.VARIANT_ATTRIBUTE.valid_from.represent = lambda value, row: value.strftime("%d/%m/%Y") if value else ''

def validation_VARIANT_ATTRIBUTE(form):
#FEXME : valutare se inserire il default "data del giorno" al momento dell'insert e toglierlo dalla validazione
    if (form.vars.valid_from==''):
        form.vars.valid_from=request.now

    return True

def variant_has_attribute(variant_id):
    numrecord = db(db.VARIANT_ATTRIBUTE.VARIANT_id == variant_id).count() or 0
    if (numrecord > 0):
        return True
    else:
        return False

def num_variant_attribute(variant_id,attribute_name):
    nrecord = db((db.VARIANT_ATTRIBUTE.attribute_name == attribute_name) & (db.VARIANT_ATTRIBUTE.VARIANT_id == variant_id)).count() or 0
    return nrecord

def insert_VARIANT_ATTRIBUTE(variant_id, attribute,valid_from):
    if not valid_from or valid_from == None:
        valid_from = datetime.now()
    for (k,v) in attribute.items():
        if v.strip() != "": # inserisco solo se valore è qualcosa di significativo
            row_prec= db(
                (db.VARIANT_ATTRIBUTE.VARIANT_id == variant_id)&(db.VARIANT_ATTRIBUTE.attribute_name == k)&(db.VARIANT_ATTRIBUTE.valid_from<=valid_from)).select(db.VARIANT_ATTRIBUTE.ALL,orderby=~db.VARIANT_ATTRIBUTE.valid_from).first()

            row_succ = db((db.VARIANT_ATTRIBUTE.VARIANT_id == variant_id)&(db.VARIANT_ATTRIBUTE.attribute_name == k)&(db.VARIANT_ATTRIBUTE.valid_from>valid_from)).select(db.VARIANT_ATTRIBUTE.ALL, orderby=db.VARIANT_ATTRIBUTE.valid_from).first()

            if row_prec and row_prec.attribute_value[:500] == v[:500]:
                continue

            if row_prec and row_prec.attribute_value[:500] != v[:500] and row_prec.valid_from==valid_from:
                #aggiorno valore
                row_prec.attribute_value = v
                row_prec.update_record()
                db.commit()
                continue

            if row_succ and row_succ.attribute_value[:500] == v[:500]:
                #aggiorno data -> retrodato validlita
                row_succ.valid_from = valid_from
                row_succ.update_record()
                db.commit()
                continue

            #inserisco
            i = db.VARIANT_ATTRIBUTE.insert(VARIANT_id = variant_id
                                           ,attribute_name = k
                                           ,attribute_value = v
                                           ,valid_from = valid_from)
            db.commit()

# sotituito prima versione che controllava solo se ultimo valore in senso temporale era diverso, se si caricavano dati con data precedente (ricarica di un annotation_file) faceva duplicazioni inutili
#        if v.strip() != "": # inserisco solo se valore è qualcosa di significativo
#            row = db((db.VARIANT_ATTRIBUTE_VALID.VARIANT_id == variant_id)&(db.VARIANT_ATTRIBUTE_VALID.attribute_name == k)).select().first()
#            if not row or (row.attribute_value[:500] != v[:500]):
#                i = db.VARIANT_ATTRIBUTE.insert(VARIANT_id = variant_id
#                                               ,attribute_name = k
#                                               ,attribute_value = v
#                                               ,valid_from = valid_from)
#                db.commit()



## mappatura della vista contenente solo i valori attualmente validi (valid_from max)

db.define_table('VARIANT_ATTRIBUTE_VALID'
                ,Field('VARIANT_id'        ,'reference VARIANT'      ,label = T('Variant'))
                ,Field('attribute_name'    ,'string' ,length = 250   ,label = T('Attribute'))
                ,Field('attribute_value'   ,'string' ,length = 500   ,label = T('Value'))
                ,Field('valid_from'        ,'date'                   ,label = T('Valid from'))
                ,format='%(attribute_name)s : %(attribute_value)s  at %(valid_from)'
                ,migrate=False
               )

db.VARIANT_ATTRIBUTE_VALID.valid_from.represent = lambda value, row: value.strftime("%d/%m/%Y") if value else ''
db.VARIANT_ATTRIBUTE_VALID.attribute_value.widget = lambda f,v : SQLFORM.widgets.text.widget(f,v,_rows=4)


##########################
##  VARIANT ANNOTATION  ##
##########################

db.define_table('ANNOTATION_TYPE'
               ,Field('name_type'           ,'string'      ,length = 50  ,label = T('Name of Annotation''s Type'))
               ,Field('variant_hg19'        ,'string'      ,length = 50  ,label = T('Variant hg19')
                     ,comment = T('colonne (tra "") che concatenate con | compongono la variante: "X"|"Y"|"Z"'))
               ,Field('variant_hg38'        ,'string'      ,length = 50  ,label = T('Variant hg38')
                     ,comment = T('colonne (tra "") che concatenate con | compongono la variante: "X"|"Y"|"Z"'))
               ,Field('gene'                ,'string'      ,length = 10  ,label = T('Gene')
                      ,comment = T('colonne (tra "") che concatenate con | compongono il gene: "X"|"Y"|"Z"'))
               ,Field('classif'             ,'string'      ,length = 100 ,label = T('Classif')
                  ,comment = T('colonne (tra "") che concatenate con | compongono la classificazione:  "X"|"Y"'))
                ,Field('classif_eval'       ,'text'                      ,label = T('Eval Classif')
                  ,comment = T('evaluation classif. Es: classif[0][0:2] if classif[0][0:2] in ["C1","C2",C3","C4",C5"] else "" '))
               ,Field('variant_attribute'  ,'list:string'  ,length = 500  ,label = T('Variant Attribute')
                     ,comment = T('Indica "X":"L", per importarte la colonna X (tra "") dandole etichetta L (tra ""); usa | per concatenare più colonne ("X"|"Y":"L")'))
               ,format='%(name_type)s'
               )

db.ANNOTATION_TYPE.name_type.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
#db.ANNOTATION_TYPE.variant.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.ANNOTATION_TYPE.classif_eval.widget = lambda f,v : SQLFORM.widgets.text.widget(f,v,_rows=4)
#db.ANNOTATION_TYPE.variant_attribute.widget = lambda f,v : SQLFORM.widgets.list.widget(f,v,_rows=2)

def validation_ANNOTATION_TYPE(form):
    if not (request.vars['variant_hg19']) and not (request.vars['variant_hg38']) :
        form.errors.variant_hg19 = T('indicare obbligatoriamente una variante')
        form.errors.variant_hg38 = T('indicare obbligatoriamente una variante')
        return False
    return True


db.define_table('ANNOTATION_FILE'
                ,Field('file_upload'         ,'upload',  uploadseparate=True ,autodelete=True 
                                                                              ,label = T('Annotation file') )
                ,Field('filename_upload'     ,'string'      ,length = 200     ,label = T('File name'))
                ,Field('date_upload'         ,'datetime'                      ,label = T('Date upload') )
                ,Field('fl_elaborated'       ,'string'      ,length = 1       ,label = T('Elaborated ?') 
                        ,comment = T('N=Not Elaborated X=in Elaboration Y=Elaborated'))
                ,Field('ANNOTATION_TYPE_id'  ,'reference ANNOTATION_TYPE'     ,label = T('File type'))
                ,format='%(filename_upload)s'
               )

db.ANNOTATION_FILE.file_upload.requires = IS_UPLOAD_FILENAME( error_message='obbligatorio')#, extension='^(vcf)$')
#db.ANNOTATION_FILE.file_upload.represent = lambda value,row: A(row.filename_upload or T('annotation file'), _href=URL('download', args=value))
db.ANNOTATION_FILE.file_upload.represent = lambda value,row: A(T('Annotation file'), _href=URL('download', args=value))

db.ANNOTATION_FILE.date_upload.requires = IS_EMPTY_OR(IS_DATE())
db.ANNOTATION_FILE.date_upload.represent = lambda value, row: value.strftime("%d/%m/%Y %H:%M") if value else ''

db.ANNOTATION_FILE.fl_elaborated.default = 'N'
db.ANNOTATION_FILE.fl_elaborated.requires=IS_IN_SET([('N'),('X'),('Y')])

db.ANNOTATION_FILE.fl_elaborated.widget=lambda f,v : SQLFORM.widgets.radio.widget(f,v,style='table', cols=3, _width='100%')
#db.ANNOTATION_FILE.fl_elaborated.represent = lambda value, row: representlabel(db.ANNOTATION_FILE.fl_elaborato,value)

db.ANNOTATION_FILE.ANNOTATION_TYPE_id.requires=IS_EMPTY_OR(IS_IN_DB(db, 'ANNOTATION_TYPE.id', '%(name_type)s'))


def validation_ANNOTATION_FILE(form):
    return True

def validation_ANNOTATION_FILE_import(form):
    if request.vars['file_upload'] =='':
        form.errors.file_upload = T('obbligatorio')
        return False
    return True
    


def insert_ANNOTATION_FILE(file_upload,filename_upload):
    i = db.ANNOTATION_FILE.insert(file_upload = file_upload
                                 ,filename_upload = filename_upload
                                 ,date_upload = datetime.now()
                                 ,fl_elaborated = 'N')
    db.commit()
    return i



###########
##  VCF  ##
###########

db.define_table('PANEL'
               ,Field('name_panel'  ,'string'      ,length = 50   ,label = T('Name of panel'))
               ,Field('gene'        ,'string'      ,length = 500  ,label = T('gene'))
               ,format='%(name_panel)s'
               )

db.PANEL.name_panel.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
#db.PANEL.gene.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.PANEL.gene.widget = lambda f,v : SQLFORM.widgets.text.widget(f,v,_rows=4)

def validation_PANEL(form):
    return True

def PANEL_is_used(PANEL_id):
    row = db(db.VCF_FILE.PANEL_id == PANEL_id).select().first()
    if row:
        return True
    else:
        return False
    

db.define_table('VIRTUAL_PANEL'
               ,Field('name_virtual_panel'  ,'string'      ,length = 50  ,label = T('Name of virtual panel'))
               ,Field('gene'                ,'string'      ,length = 500 ,label = T('gene'))
               ,format='%(name_virtual_panel)s'
               )

db.VIRTUAL_PANEL.name_virtual_panel.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.VIRTUAL_PANEL.gene.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.VIRTUAL_PANEL.gene.widget = lambda f,v : SQLFORM.widgets.text.widget(f,v,_rows=4)

def validation_VIRTUAL_PANEL(form):
    return True

def VIRTUAL_PANEL_is_used(VIRTUAL_PANEL_id):
    row = db(db.VCF_FILE.VIRTUAL_PANEL_id == VIRTUAL_PANEL_id).select().first()
    if row:
        return True
    else:
        return False


db.define_table('VCF_TYPE'
               ,Field('name_type'           ,'string'      ,length = 50  ,label = T('Name of Type VCF'))
               ,Field('variant'             ,'string'      ,length = 50  ,label = T('Variant')
                     ,comment = T('Indica le colonne da concatenare, separate da |, per identificare la variante'))
               ,Field('row_filter'          ,'list:string'      ,length = 150 ,label = T('row filter')
                     ,comment = T('Indica le condizioni delle righe da importare. Vuoto = tutte'))
               ,Field('sample_attribute'   ,'list:string' ,length = 50  ,label = T('Sample Attribute')
                     ,comment = T('Indica X:L, per importarte la colonna X dandole etichetta L; usa | per concatenare più colonne (X|Y:L)'))
               ,Field('variant_attribute'  ,'list:string' ,length = 250  ,label = T('Variant Attribute')
                     ,comment = T('Indica X:L, per importarte la colonna X dandole etichetta L; usa | per concatenare più colonne (X|Y:L)'))
               ,format='%(name_type)s'
               )

db.VCF_TYPE.name_type.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.VCF_TYPE.variant.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
#db.VCF_TYPE.col_filter.widget = lambda f,v : SQLFORM.widgets.text.widget(f,v,_rows=4)

def validation_VCF_TYPE(form):
    return True


db.define_table('VCF_FILE'
                ,Field('file_upload'         ,'upload',  uploadseparate=True ,autodelete=True 
                                                                              ,label = T('VCF file') )
                ,Field('filename_upload'     ,'string'      ,length = 200     ,label = T('VCF name'))
                ,Field('date_upload'         ,'datetime'                      ,label = T('date upload') )
                ,Field('date_vcf'            ,'date'                          ,label = T('date VCF') )
                ,Field('hg'                  ,'string'      ,length = 10      ,label = T('hg'))
                ,Field('samples'             ,'list:string' ,length = 10      ,label = T('sample(s)'))
                ,Field('fl_elaborated'       ,'string'      ,length = 1       ,label = T('Elaborated ?') )
                ,Field('VCF_TYPE_id'         ,'reference VCF_TYPE'            ,label = T('VCF type'))
                ,Field('PANEL_id'            ,'reference PANEL'               ,label = T('Panel'))
                ,Field('VIRTUAL_PANEL_id'    ,'reference VIRTUAL_PANEL'       ,label = T('Virtual panel') )
                ,format='%(filename_upload)s'
               )

db.VCF_FILE.file_upload.requires = IS_UPLOAD_FILENAME( error_message='obbligatorio')#, extension='^(vcf)$')
#db.VCF_FILE.file_upload.represent = lambda value,row: A(row.filename_upload or T('vcf file'), _href=URL('download', args=value))
db.VCF_FILE.file_upload.represent = lambda value,row: A(T('VCF file'), _href=URL('download', args=value))

db.VCF_FILE.date_upload.requires = IS_EMPTY_OR(IS_DATE())
db.VCF_FILE.date_upload.represent = lambda value, row: value.strftime("%d/%m/%Y %H:%M") if value else ''
db.VCF_FILE.date_vcf.requires = IS_EMPTY_OR(IS_DATE())
db.VCF_FILE.date_vcf.represent = lambda value, row: value.strftime("%d/%m/%Y") if value else ''

db.VCF_FILE.fl_elaborated.default = 'N'
db.VCF_FILE.fl_elaborated.requires=IS_IN_SET([('N'),('Y')])

db.VCF_FILE.fl_elaborated.widget=lambda f,v : SQLFORM.widgets.radio.widget(f,v,style='table', cols=2, _width='100%')
#db.VCF_FILE.fl_elaborated.represent = lambda value, row: representlabel(db.VCF_FILE.fl_elaborato,value)

db.VCF_FILE.VCF_TYPE_id.requires=IS_EMPTY_OR(IS_IN_DB(db, 'VCF_TYPE.id', '%(name_type)s'))
db.VCF_FILE.PANEL_id.requires=IS_EMPTY_OR(IS_IN_DB(db, 'PANEL.id', '%(name_panel)s'))
db.VCF_FILE.VIRTUAL_PANEL_id.requires=IS_EMPTY_OR(IS_IN_DB(db, 'VIRTUAL_PANEL.id', '%(name_virtual_panel)s'))


def validation_VCF_FILE(form):
    return True

def validation_VCF_FILE_import(form):
    if request.vars['file_upload'] =='':
        form.errors.file_upload = T('obbligatorio')
        return False
    return True



def insert_VCF_FILE(file_upload,filename_upload):
    i = db.VCF_FILE.insert(file_upload = file_upload
                         ,filename_upload = filename_upload
                         ,date_upload = datetime.now()
                         ,fl_elaborated = 'N')
    db.commit()
    return i


def update_data_in_VCF_FILE(vcf_file_id,date_vcf,hg,samples):

    row = db(db.VCF_FILE.id == vcf_file_id).select().first()
    if row:
        row.date_vcf = date_vcf
        row.hg = hg
        row.samples = samples
        row.update_record()
        db.commit()
        return row.id
    else:
        return False

############
## SAMPLE ##
############

db.define_table('TISSUE_TYPE'
               ,Field('tissue_type'  ,'string'      ,length = 50  ,label = T('Tissue type'))
               ,format='%(tissue_type)s'
               )

db.TISSUE_TYPE.tissue_type.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))

def validation_TISSUE_TYPE(form):
    return True



db.define_table('SAMPLE'
                ,Field('sample'              ,'string'      ,length = 50      ,label = T('Sample'))
                ,Field('date_sample'         ,'date'                          ,label = T('Date') )
                ,Field('VCF_FILE_id'         ,'reference VCF_FILE'            ,label = T('VCF file'))
                ,Field('fl_sample_type'      ,'string'      ,length = 1       ,label = T('Sample type') )
                ,Field('TISSUE_TYPE_id'      ,'reference TISSUE_TYPE'         ,label = T('Tissue type') )
                ,Field('fl_sex'              ,'string'      ,length = 1       ,label = T('Sex') )
                ,format='%(sample)s'
               )


db.SAMPLE.sample.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))

#lambda r: A(('.. ' if len(r.filename_upload) > 30 else '') + r.filename_upload[-30:-4]  or T('file'), _href=URL('download', args=value))
db.SAMPLE.VCF_FILE_id.requires=IS_EMPTY_OR(IS_IN_DB(db, 'VCF_FILE.id', '%(filename_upload)s'))

db.SAMPLE.date_sample.requires = IS_EMPTY_OR(IS_DATE())
db.SAMPLE.date_sample.represent = lambda value, row: value.strftime("%d/%m/%Y") if value else ''

db.SAMPLE.fl_sample_type.requires=IS_EMPTY_OR(IS_IN_SET([('G',T('Germinale'))
                                                        ,('S',T('Somatico')) 
                                                        ]))


db.SAMPLE.fl_sample_type.widget=lambda f,v : SQLFORM.widgets.options.widget(f,v)
#SQLFORM.widgets.radio.widget(f,v,style='table', cols=2, _width='100%')
db.SAMPLE.fl_sample_type.represent = lambda value, row: representlabel(db.SAMPLE.fl_sample_type,value)


db.SAMPLE.TISSUE_TYPE_id.requires=IS_EMPTY_OR(IS_IN_DB(db, 'TISSUE_TYPE.id', '%(tissue_type)s'))

db.SAMPLE.fl_sex.requires=IS_EMPTY_OR(IS_IN_SET([('M',T('Maschio')),('F',T('Femmina')) ]))
db.SAMPLE.fl_sex.widget=lambda f,v : SQLFORM.widgets.options.widget(f,v)
#SQLFORM.widgets.radio.widget(f,v,style='table', cols=2, _width='100%')
db.SAMPLE.fl_sex.represent = lambda value, row: representlabel(db.SAMPLE.fl_sex,value)

def validation_SAMPLE(form):
    return True

def insert_SAMPLE(sample,vcf_file_id, date_sample):
# si assume che il nome del sample sia unico, pertanto ogni altro dato può essere aggiornato se sample già esiste
    sample_id = None
    row = db(db.SAMPLE.sample == sample).select().first()
    if row:
        #errore: il sample già esiste e non deve esistere!!! ritorno sample = -1!
        sample_id = -1
#FEDE: ripeensare al giro e fare in modo che il sample non possa essere inserito da file diverso da quello già presente
        sample_id = row['id']
        #se è già presente, significa che lo si sta ricaricando, quindi aggiorno il riferimento a vcf
        #row.VCF_FILE_id = vcf_file_id
        #row.fl_sample_type = None
        #row.TISSUE_TYPE_id = None
        #row.fl_sex = None
        #row.update_record()
    else:
        sample_id = db.SAMPLE.insert(sample=sample
                                    ,VCF_FILE_id=vcf_file_id
                                    ,date_sample=date_sample
                                    )
    return sample_id

def update_SAMPLE(sample_id,vcf_file_id,fl_sample_type,tissue_type_id,fl_sex,date_sample):
    # si assume che il nome del sample sia unico, pertanto ogni altro dato può essere aggiornato se sample già esiste
    #tolto opzione di aggiornaemnto sample da ricarica vcf : prima si cancella il sample e poi si ricarica
    sample_id = None
    row = db(db.SAMPLE.id == sample_id).select().first()
    if row:
        sample_id = row['id']
        #se è già presente, significa che lo si sta ricaricando, quindi aggiorno il riferimento a vcf e altri dati
        row.sample = sample
        row.VCF_FILE_id = vcf_file_id
        row.fl_sample_type = fl_sample_type
        row.TISSUE_TYPE_id = tissue_type_id
        row.fl_sex = fl_sex
        row.date_sample = date_sample
        row.update_record()
        db.commit()
    else:
        return False

    return sample_id


####################
## SAMPLE VARIANT ##
####################

db.define_table('SAMPLE_VARIANT'
                ,Field('SAMPLE_id'         ,'reference SAMPLE'      ,label = T('Sample'))
                ,Field('VARIANT_id'        ,'reference VARIANT'     ,label = T('Variant'))
                ,Field('VARIANT_crypt'     ,'string'  ,lenght = 100 ,label = T('Variant crypt'))
                ,Field('AF'                ,'string'  ,length = 20  ,label = T('AF'))
                ,Field('GT'                ,'string'  ,length = 20  ,label = T('GT'))
                ,format = lambda r: '{} {}'.format(db(db.SAMPLE.id==r.SAMPLE_id).select().first()['sample'] or '' 
                                                 , db(db.VARIANT.id==r.VARIANT_id).select().first()['id_hg19'] or '')
                )

def validation_SAMPLE_VARIANT(form):
    return True


def insert_SAMPLE_VARIANT(sample_id,variant_id):
    sample_variant_id = None
    row = db((db.SAMPLE_VARIANT.SAMPLE_id == sample_id) & (db.SAMPLE_VARIANT.VARIANT_id == variant_id) ).select().first()
    if row:
        sample_variant_id = row['id']
    else:
        sample_variant_id = db.SAMPLE_VARIANT.insert(SAMPLE_id=sample_id, VARIANT_id=variant_id)

    return sample_variant_id


def update_SAMPLE_VARIANT(sample_variant_id,af,gt):
    row = db(db.SAMPLE_VARIANT.id == sample_variant_id).select().first()
    if row:
        sample_variant_id = row['id']
        #se è già presente, significa che lo si sta ricaricando, quindi aggiorno il valore di af
        row.AF = af
        row.GT = gt
        row.update_record()
        db.commit()
    else:
        sample_variant_id  = None

    return sample_variant_id

db.define_table('SAMPLE_VARIANT_ATTRIBUTE'
                ,Field('SAMPLE_VARIANT_id' ,'reference SAMPLE_VARIANT'          ,label = T('Sample & Variant'))
                ,Field('attribute_name'    ,'string' ,length = 250   ,label = T('Attributo'))
                ,Field('attribute_value'   ,'string' ,length = 250   ,label = T('Valore'))
                ,format='%(attribute_name)s : %(attribute_value)s'
               )

db.SAMPLE_VARIANT_ATTRIBUTE.attribute_name.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))
db.SAMPLE_VARIANT_ATTRIBUTE.attribute_value.requires = IS_NOT_EMPTY(error_message=T('obbligatorio'))

def validation_SAMPLE_VARIANT_ATTRIBUTE(form):
    return True

def insert_SAMPLE_VARIANT_ATTRIBUTE(sample_variant_id,attributi):
    for (k,v) in attributi.items():
        row = db((db.SAMPLE_VARIANT_ATTRIBUTE.SAMPLE_VARIANT_id == sample_variant_id)
                &(db.SAMPLE_VARIANT_ATTRIBUTE.attribute_name == k)).select().first()
        if (row) and (row.attribute_value == v):
            i = row.id
            row.attribute_value = v
            row.update_record()
            db.commit()
        else:
            i = db.SAMPLE_VARIANT_ATTRIBUTE.insert(SAMPLE_VARIANT_id = sample_variant_id
                                                   ,attribute_name = k
                                                   ,attribute_value = v)
            db.commit()
